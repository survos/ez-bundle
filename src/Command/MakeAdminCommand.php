<?php
declare(strict_types=1);

namespace Survos\EzBundle\Command;

use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;
use Nette\PhpGenerator\PhpNamespace;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Method;
use Nette\PhpGenerator\Parameter;
use Survos\EzBundle\Controller\BaseCrudController;
use Survos\EzBundle\Service\EzService;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AvatarField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\UrlField;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Console\Attribute\Argument;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Attribute\Option;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand('ez:make:admin', 'Generate EasyAdmin CRUDs and an optional Dashboard')]
final class MakeAdminCommand
{
    public function __construct(private readonly EzService $ez) {}

    public function __invoke(
        SymfonyStyle $io,
        #[Argument('Entity FQCN or short name (ignored if --all)')]
        ?string $entity = null,

        #[Option('Generate for all entities discovered in config "entity_dirs" (negatable)')]
        ?bool $all = null,

        #[Option('Also create a Dashboard controller (negatable)')]
        ?bool $dashboard = null,

        #[Option('Output directory for controllers (default: src/Controller/Admin)')]
        string $outDir = 'src/Controller/Admin',

        #[Option('Force overwrite existing files (negatable)')]
        ?bool $force = null,
    ): int {
        $projectDir = getcwd() ?: '.';
        $outAbs = $this->abspath($projectDir, $outDir);
        if (!is_dir($outAbs) && !@mkdir($outAbs, 0775, true) && !is_dir($outAbs)) {
            $io->error("Could not create directory: $outAbs");
            return Command::FAILURE;
        }

        // Resolve entity list
        $entities = [];
        if ($all) {
            $entities = array_keys($this->ez->all());
            if (!$entities) {
                $io->warning('No entities discovered in EzService map. Check survos_ez.entity_dirs and cache:clear.');
            }
        } elseif ($entity) {
            $fqcn = $this->resolveEntityFqcn($entity);
            if (!$fqcn || !class_exists($fqcn)) {
                $io->error("Entity class not found: $entity");
                return Command::FAILURE;
            }
            $entities = [$fqcn];
        } else {
            $io->error('Provide an entity name or use --all');
            return Command::FAILURE;
        }

        $printer = new PsrPrinter();

        // Generate CRUDs
        foreach ($entities as $fqcn) {
            $short = (new \ReflectionClass($fqcn))->getShortName();
            $crudClass = $short . 'CrudController';
            $crudPath  = $outAbs . DIRECTORY_SEPARATOR . $crudClass . '.php';

            if (file_exists($crudPath) && !$force) {
                $io->writeln("<comment>skip</comment> $crudPath (exists; use --force)");
                continue;
            }

            $file = new PhpFile();
            $file->addComment('Generated by ez:make:admin');

            /** @var PhpNamespace $ns */
            $ns = $file->addNamespace('App\\Controller\\Admin');
            $ns->addUse(BaseCrudController::class);
            $ns->addUse(Crud::class);
            $ns->addUse(AvatarField::class);
            $ns->addUse(TextField::class);
            $ns->addUse(IntegerField::class);
            $ns->addUse(ArrayField::class);
            $ns->addUse(UrlField::class);
            $ns->addUse($fqcn);

            /** @var ClassType $class */
            $class = $ns->addClass($crudClass)
                ->setExtends(BaseCrudController::class)
                ->setFinal();

            // static getEntityFqcn(): string
            $m = $class->addMethod('getEntityFqcn');
            $m->setStatic(true)->setPublic()->setReturnType('string');
            $short = (new \ReflectionClass($fqcn))->getShortName();
            $m->addBody('return ' . $short . '::class;');

            // protected function once(array &$seen, string $name, $field): mixed
            $once = $class->addMethod('once');
            $once->setProtected()->setReturnType('mixed');
//            $pSeen = (new Parameter('seen'))->setType('array')->setReference(true);
            $once->addParameter('seen')->setType('array');
            $once->addParameter('name')->setType('string');
            $once->addParameter('field');
            $once->addBody('if (isset($seen[$name])) { return null; }');
            $once->addBody('$seen[$name] = true;');
            $once->addBody('return $field;');

            // public function configureFields(string $pageName): iterable
            $cf = $class->addMethod('configureFields');
            $cf->setPublic()->setReturnType('iterable');
            $cf->addParameter('pageName')->setType('string');

            $cf->addBody('$fields = [];');
            $cf->addBody('$seen = [];');
            $cf->addBody('');
            $cf->addBody('// Visual priority order - most important first');
            $cf->addBody('if ($f = $this->once($seen, ?, AvatarField::new(?)->setHeight(36))) { $fields[] = $f; }', ['thumbnailUrl', 'thumbnailUrl']);
            $cf->addBody('');
            $cf->addBody('if ($f = $this->once($seen, ?,', ['id']);
            $cf->addBody('    TextField::new(?)->formatValue(function ($value) {', ['id']);
            $cf->addBody('        return sprintf(\'<a href="%s">%s</a>\', $this->generateUrl(\'admin_custom_asset\', [\'id\' => $value]), $value);');
            $cf->addBody('    })');
            $cf->addBody(')) { $fields[] = $f; }');
            $cf->addBody('');
            $cf->addBody('if ($f = $this->once($seen, ?, TextField::new(?))) { $fields[] = $f; }', ['marking', 'marking']);
            $cf->addBody('if ($f = $this->once($seen, ?, IntegerField::new(?))) { $fields[] = $f; }', ['statusCode', 'statusCode']);
            $cf->addBody('if ($f = $this->once($seen, ?, TextField::new(?))) { $fields[] = $f; }', ['mime', 'mime']);
            $cf->addBody('if ($f = $this->once($seen, ?, UrlField::new(?))) { $fields[] = $f; }', ['originalUrl', 'originalUrl']);
            $cf->addBody('if ($f = $this->once($seen, ?, ArrayField::new(?)->onlyOnDetail())) { $fields[] = $f; }', ['resized', 'resized']);
            $cf->addBody('if ($f = $this->once($seen, ?, TextField::new(?)->onlyOnDetail())) { $fields[] = $f; }', ['tempFilename', 'tempFilename']);
            $cf->addBody('if ($f = $this->once($seen, ?, ArrayField::new(?, ?))) { $fields[] = $f; }', ['resizedCount', 'resizedCount', '#resized']);
            $cf->addBody('if ($f = $this->once($seen, ?, IntegerField::new(?)->setLabel(\'Size (bytes)\'))) { $fields[] = $f; }', ['size', 'size']);
            $cf->addBody('');
            $cf->addBody('// Fallback to BaseCrudController (EzService-driven) if nothing added here');
            $cf->addBody('if (!$fields) { return parent::configureFields($pageName); }');
            $cf->addBody('return array_values(array_filter($fields));');

            file_put_contents($crudPath, $printer->printFile($file));
            $io->writeln("<info>make</info> $crudPath");
        }

        // Dashboard
        if ($dashboard) {
            $dashPath = $outAbs . DIRECTORY_SEPARATOR . 'DashboardController.php';
            if (!file_exists($dashPath) || $force) {
                $file = new PhpFile();
                $file->addComment('Generated by ez:make:admin --dashboard');

                $ns = $file->addNamespace('App\\Controller\\Admin');
                $ns->addUse(AbstractDashboardController::class);
                $ns->addUse(Dashboard::class);
                $ns->addUse(MenuItem::class);
                $ns->addUse(Route::class);
                $ns->addUse(EntityManagerInterface::class);
                $ns->addUse(EzService::class);

                $class = $ns->addClass('DashboardController')
                    ->setExtends(AbstractDashboardController::class)
                    ->setFinal();

                $class->addProperty('em')->setPrivate()->setType(EntityManagerInterface::class);
                $class->addProperty('ez')->setPrivate()->setType(EzService::class);

                $ctor = $class->addMethod('__construct')->setPublic();
                $ctor->addParameter('em')->setType(EntityManagerInterface::class);
                $ctor->addParameter('ez')->setType(EzService::class);
                $ctor->addBody('$this->em = $em; $this->ez = $ez;');

                $index = $class->addMethod('index')->setPublic();
                $index->addAttribute(Route::class, ['/ez', 'name' => 'ez_admin']);
                $index->addBody('return $this->render("admin/dashboard.html.twig");');

                $cfgDash = $class->addMethod('configureDashboard')->setPublic()->setReturnType(Dashboard::class);
                $cfgDash->addBody('return Dashboard::new()->setTitle("EZ Admin");');

                $cfgMenu = $class->addMethod('configureMenuItems')->setPublic()->setReturnType('iterable');
                $cfgMenu->addBody('yield MenuItem::linkToDashboard("Dashboard", "tabler:home");');
                $cfgMenu->addBody('$all = $this->ez->all();');
                $cfgMenu->addBody('foreach ($all as $class => $meta) {');
                $cfgMenu->addBody('    $label = $meta["admin"]["label"] ?? (new \ReflectionClass($class))->getShortName();');
                $cfgMenu->addBody('    $icon  = $meta["admin"]["icon"]  ?? "tabler:list";');
                $cfgMenu->addBody('    $count = 0;');
                $cfgMenu->addBody('    try { $count = $this->em->getRepository($class)->count([]); } catch (\Throwable $e) {}');
                $cfgMenu->addBody('    yield MenuItem::linkToCrud($label, $icon, $class)->setBadge((string)$count);');
                $cfgMenu->addBody('}');

                file_put_contents($dashPath, $printer->printFile($file));
                $io->writeln("<info>make</info> $dashPath");

                // Twig
                $twigDir = $projectDir . '/templates/admin';
                if (!is_dir($twigDir)) { @mkdir($twigDir, 0775, true); }
                $twigPath = $twigDir . '/dashboard.html.twig';
                if (!file_exists($twigPath) || $force) {
                    file_put_contents($twigPath, <<<'TWIG'
{% extends '@EasyAdmin/page/content.html.twig' %}
{% block content %}
  <div class="ea-content">
    <h1>EZ Admin</h1>
    <p>Use the left menu to navigate entities.</p>
  </div>
{% endblock %}
TWIG);
                    $io->writeln("<info>make</info> $twigPath");
                } else {
                    $io->writeln("<comment>skip</comment> $twigPath (exists; use --force)");
                }
            } else {
                $io->writeln("<comment>skip</comment> $dashPath (exists; use --force)");
            }
        }

        $io->note('Open the dashboard at /ez (route name: ez_admin)');
        return Command::SUCCESS;
    }

    private function resolveEntityFqcn(string $input): ?string
    {
        if (str_contains($input, '\\') && class_exists($input)) return $input;
        $candidates = ['App\\Entity\\' . $input, $input];
        foreach ($candidates as $fqcn) if (class_exists($fqcn)) return $fqcn;
        return null;
    }

    private function abspath(string $root, string $path): string
    {
        return \str_starts_with($path, DIRECTORY_SEPARATOR)
            ? $path
            : rtrim($root, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . ltrim($path, DIRECTORY_SEPARATOR);
    }
}
