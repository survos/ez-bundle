<?php
declare(strict_types=1);

namespace Survos\EzBundle\Command;

use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;
use Survos\EzBundle\Controller\BaseCrudController;
use Survos\EzBundle\Service\EzService;
use Symfony\Component\Console\Attribute\Argument;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Attribute\Option;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand('ez:make:admin', 'Generate an EasyAdmin CRUD (and optional Dashboard) for an entity')]
final class MakeAdminCommand
{
    public function __construct(
        private readonly EzService $ez,
    ) {}

    public function __invoke(
        SymfonyStyle $io,
        #[Argument('Entity FQCN or short name, e.g. "App\\Entity\\Asset" or "Asset"')]
        string $entity,

        #[Option('Also create the Dashboard controller (negatable)')]
        ?bool $dashboard = null,

        #[Option('Output directory for controllers (default: src/Controller/Admin)')]
        string $outDir = 'src/Controller/Admin',

        #[Option('Force overwrite existing files (negatable)')]
        ?bool $force = null,
    ): int {
        $projectDir = getcwd() ?: '.';
        $outAbs = $this->abspath($projectDir, $outDir);
        if (!is_dir($outAbs) && !@mkdir($outAbs, 0775, true) && !is_dir($outAbs)) {
            $io->error("Could not create directory: $outAbs");
            return Command::FAILURE;
        }

        $entityFqcn = $this->resolveEntityFqcn($entity);
        if (!$entityFqcn || !class_exists($entityFqcn)) {
            $io->error("Entity class not found: $entity");
            return Command::FAILURE;
        }

        $short = (new \ReflectionClass($entityFqcn))->getShortName();
        $crudClass = $short . 'CrudController';
        $crudPath  = $outAbs . DIRECTORY_SEPARATOR . $crudClass . '.php';

        // ---- Generate CRUD Controller
        if (file_exists($crudPath) && !$force) {
            $io->warning("$crudPath exists. Use --force to overwrite.");
        } else {
            $file = new PhpFile();
            $file->addComment('This file was generated by ez:make:admin');
            $ns = $file->addNamespace('App\\Controller\\Admin');
            $ns->addUse(BaseCrudController::class);
            $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Config\\Crud');
            $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Field\\AvatarField');
            $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Field\\TextField');
            $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Field\\IntegerField');
            $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Field\\ArrayField');
            $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Field\\UrlField');

            $class = $ns->addClass($crudClass)
                        ->setExtends(BaseCrudController::class)
                        ->setFinal();

            $class->addMethod('getEntityFqcn')
                ->setPublic()
                ->setStatic()
                ->setReturnType('string')
                ->setBody('return ' . '\\' . $entityFqcn . '::class;');

            // helper to avoid duplicate fields
            $class->addMethod('once')
                ->setProtected()
                ->setReturnType('mixed')
                ->setBody(<<<'PHP2'
if (isset($seen[$name])) { return null; }
$seen[$name] = true;
return $field;
PHP2)
                ->addParameter('seen')->setType('array')->setByReference()
                ->addParameter('name')->setType('string')
                ->addParameter('field');

            // configureFields body (uses your example and a "seen" map)
            $configureFields = $class->addMethod('configureFields')
                ->setPublic()
                ->setReturnType('iterable')
                ->addParameter('pageName')->setType('string');

            $configureFields->setBody(<<<'PHP2'
$fields = [];
$seen = [];

// Visual priority order - most important first
if ($f = $this->once($seen, 'thumbnailUrl', AvatarField::new('thumbnailUrl')->setHeight(36))) { $fields[] = $f; }

if ($f = $this->once($seen, 'id',
    TextField::new('id')->formatValue(function ($value) {
        return sprintf('<a href="%s">%s</a>', $this->generateUrl('admin_custom_asset', ['id' => $value]), $value);
    })
)) { $fields[] = $f; }

if ($f = $this->once($seen, 'marking', TextField::new('marking'))) { $fields[] = $f; }
if ($f = $this->once($seen, 'statusCode', IntegerField::new('statusCode'))) { $fields[] = $f; }
if ($f = $this->once($seen, 'mime', TextField::new('mime'))) { $fields[] = $f; }
if ($f = $this->once($seen, 'originalUrl', UrlField::new('originalUrl'))) { $fields[] = $f; }
if ($f = $this->once($seen, 'resized', ArrayField::new('resized')->onlyOnDetail())) { $fields[] = $f; }
if ($f = $this->once($seen, 'tempFilename', TextField::new('tempFilename')->onlyOnDetail())) { $fields[] = $f; }
if ($f = $this->once($seen, 'resizedCount', ArrayField::new('resizedCount', '#resized'))) { $fields[] = $f; }
if ($f = $this->once($seen, 'size', IntegerField::new('size')->setLabel('Size (bytes)'))) { $fields[] = $f; }

// Example custom template for colors (only on detail)
// if ($f = $this->once($seen, 'colorAnalysis',
//     ArrayField::new('colorAnalysis', 'Colors')->setTemplatePath('easy_admin/field/colors_detail.html.twig')->onlyOnDetail()
// )) { $fields[] = $f; }

// Fallback to BaseCrudController (EzService-driven) if no fields were added here.
if (!$fields) {
    return parent::configureFields($pageName);
}

return array_values(array_filter($fields));
PHP2);

            $printer = new PsrPrinter();
            file_put_contents($crudPath, $printer->printFile($file));
            $io->success("CRUD created: $crudPath");
        }

        // ---- Optionally generate Dashboard
        if ($dashboard) {
            $dashPath = $outAbs . DIRECTORY_SEPARATOR . 'DashboardController.php';
            if (file_exists($dashPath) && !$force) {
                $io->warning("$dashPath exists. Use --force to overwrite.");
            } else {
                $label = $this->ez->getAdmin($entityFqcn)['label'] ?? (new \ReflectionClass($entityFqcn))->getShortName();
                $icon  = $this->ez->getAdmin($entityFqcn)['icon'] ?? 'fa fa-database';

                $file = new PhpFile();
                $file->addComment('This file was generated by ez:make:admin');
                $ns = $file->addNamespace('App\\Controller\\Admin');
                $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Controller\\AbstractDashboardController');
                $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Config\\Dashboard');
                $ns->addUse('EasyCorp\\Bundle\\EasyAdminBundle\\Config\\MenuItem');
                $ns->addUse('Symfony\\Component\\Routing\\Annotation\\Route');

                $class = $ns->addClass('DashboardController')->setExtends('EasyCorp\\Bundle\\EasyAdminBundle\\Controller\\AbstractDashboardController');

                $class->addMethod('index')
                    ->addAttribute('Symfony\\Component\\Routing\\Annotation\\Route', ['/admin'])
                    ->setPublic()
                    ->setBody('return $this->render("admin/dashboard.html.twig");');

                $class->addMethod('configureDashboard')
                    ->setPublic()
                    ->setReturnType('EasyCorp\\Bundle\\EasyAdminBundle\\Config\\Dashboard')
                    ->setBody('return Dashboard::new()->setTitle(' . var_export($label, true) . ');');

                $class->addMethod('configureMenuItems')
                    ->setPublic()
                    ->setReturnType('iterable')
                    ->setBody(<<<PHP2
yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
yield MenuItem::linkToCrud('$label', '$icon', \\$entityFqcn::class)->setController(\\App\\Controller\\Admin\\{$crudClass}::class);
PHP2);

                $printer = new PsrPrinter();
                file_put_contents($dashPath, $printer->printFile($file));
                $io->success("Dashboard created: $dashPath");
            }
        }

        $io->note('Remember to add a route to /admin (Dashboard#index) and a Twig template at templates/admin/dashboard.html.twig');
        return Command::SUCCESS;
    }

    private function resolveEntityFqcn(string $input): ?string
    {
        if (str_contains($input, '\\')) {
            return $input;
        }
        $candidates = [
            'App\\Entity\\' . $input,
            $input,
        ];
        foreach ($candidates as $fqcn) {
            if (class_exists($fqcn)) {
                return $fqcn;
            }
        }
        return null;
    }

    private function abspath(string $root, string $path): string
    {
        if (\str_starts_with($path, DIRECTORY_SEPARATOR)) {
            return $path;
        }
        return rtrim($root, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . ltrim($path, DIRECTORY_SEPARATOR);
    }
}
